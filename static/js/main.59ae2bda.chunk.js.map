{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext.js","components/NavBar.component.jsx","components/BookDetails.components.jsx","components/BookList.component.jsx","components/BookForm.component.jsx","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","title","book","author","id","uuid","filter","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","NavBar","useContext","className","length","BookDetails","BookList","map","key","NewBookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAEaA,EAAc,SAACC,EAAOC,GAC/B,OAAOA,EAAOC,MACV,IAAK,WACD,MAAM,GAAN,mBAAUF,GAAV,CAAiB,CACbG,MAAOF,EAAOG,KAAKD,MACnBE,OAAQJ,EAAOG,KAAKC,OACpBC,GAAIC,SAEZ,IAAK,cACD,OAAOP,EAAMQ,QAAO,SAAAJ,GAAI,OAAIA,EAAKE,KAAOL,EAAOK,MACnD,QACI,OAAON,ICVNS,EAAcC,0BAyBZC,EAtBa,SAAAC,GAAU,IAAD,EACTC,qBAAWd,EAAa,IAAI,WAGpD,IAAMe,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MALV,mBAC5BK,EAD4B,KACrBC,EADqB,KAenC,OANAC,qBAAU,WACRN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAC5C,CAACA,IAKF,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAAEN,QAAOC,aACnCR,EAAMc,WCVEC,EAVA,WAAO,IACVR,EAAUS,qBAAWnB,GAArBU,MACR,OACI,yBAAKU,UAAU,UACX,kDACA,iDAAwBV,EAAMW,OAA9B,4BCWGC,EAhBK,SAAC,GAAa,EAAX3B,KACEwB,qBAAWnB,GAAxBW,UCiBGY,EAjBE,WAAO,IACZb,EAAUS,qBAAWnB,GAArBU,MACR,OAAOA,EAAMW,OACT,yBAAKD,UAAU,aACX,4BACKV,EAAMc,KAAK,SAAA7B,GACR,OACI,kBAAC,EAAD,CAAaA,KAAMA,EAAM8B,IAAK9B,EAAKE,UAMlD,yBAAKuB,UAAU,SAAf,0CCqBMM,EAnCK,WAAO,IACjBf,EAAaQ,qBAAWnB,GAAxBW,SADgB,EAGEgB,mBAAS,IAHX,mBAGjBjC,EAHiB,KAGVkC,EAHU,OAIID,mBAAS,IAJb,mBAIjB/B,EAJiB,KAITiC,EAJS,KAcxB,OACE,0BAAMC,SATa,SAACC,GAClBA,EAAEC,iBAGFrB,EAAS,CAAClB,KAAK,WAAYE,KAAK,CAACD,QAAOE,YACxCgC,EAAS,IACTC,EAAU,MAIV,2BACEpC,KAAK,OACLwC,YAAY,aACZjB,MAAOtB,EACPwC,SAAU,SAAAH,GAAC,OAAIH,EAASG,EAAEI,OAAOnB,QACjCoB,UAAQ,IAEV,2BACE3C,KAAK,OACLwC,YAAY,cACZjB,MAAOpB,EACPsC,SAAU,SAAAH,GAAC,OAAIF,EAAUE,EAAEI,OAAOnB,QAClCoB,UAAQ,IAEV,2BAAO3C,KAAK,SAASuB,MAAM,eCflBqB,MAZf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.59ae2bda.chunk.js","sourcesContent":["import uuid from 'uuid/dist/v1';\n\nexport const bookReducer = (state, action) => {\n    switch(action.type) {\n        case \"ADD_BOOK\":\n            return[...state, {\n                title: action.book.title,\n                author: action.book.author,\n                id: uuid()\n            }]\n        case \"REMOVE_BOOK\":\n            return state.filter(book => book.id !== action.id)\n        default:\n            return state\n    }\n}\n\n//now state represents the books, because the ID it will take it from the Action, which is the other parameter that we bring in here\n//to compare!! ","import React, { createContext, useReducer, useEffect  } from \"react\";\nimport { bookReducer } from \"../reducers/bookReducer\";\n\nexport const BookContext = createContext();\n\n// now we use the reducer that takes the reducer and the initial state as parameters\nconst BookContextProvider = props => {\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\n    //this will let us persist the data in the local storage, we pass a third function in the case that there is an empty\n    // object in second arguments??? \n    const localData = localStorage.getItem('books');\n    return localData ? JSON.parse(localData) : [];\n  });\n  //we will use useEffect to handle the data oout of the app, in this case to local storage, but it could be to an\n  //external API and monitor for books\n  useEffect(() => {\n    localStorage.setItem('books', JSON.stringify(books))\n  }, [books]);\n  \n// we now pass the dispatch to the children, so nothing is going to work yet. \n  \n  return (\n    <BookContext.Provider value={{ books, dispatch }}>\n      {props.children}\n    </BookContext.Provider>\n  );\n};\n\nexport default BookContextProvider;\n","import React, {useContext} from 'react';\nimport { BookContext } from '../contexts/BookContext';\n\nconst NavBar = () => {\n    const { books } = useContext(BookContext);\n    return (\n        <div className=\"navbar\">\n            <h1>Ninja Reading List</h1>\n            <p>Currently you have { books.length } books to get through </p>\n        </div>\n    );\n}\n\nexport default NavBar;","import React, { useContext } from 'react';\nimport { BookContext } from '../contexts/BookContext';\n\nconst BookDetails = ({ book }) => {\n    const { dispatch } = useContext(BookContext);\n\n    const handleClick = () => {\n        dispatch({type: 'REMOVE_BOOK', id : book.id})\n    }\n    \n    return ( \n        // when called this method, it will remove\n        <li onClick={handleClick}>\n            <div className=\"title\">{book.title}</div>\n            <div className=\"author\">{book.author}</div>\n        </li>\n     );\n}\n \nexport default BookDetails;","import React, { useContext } from 'react';\nimport { BookContext } from '../contexts/BookContext';\nimport BookDetails from './BookDetails.components';\n\nconst BookList = () => {\n    const { books } = useContext(BookContext);\n    return books.length ? ( \n        <div className=\"book-list\">\n            <ul>\n                {books.map( book => {\n                    return (\n                        <BookDetails book={book} key={book.id}/>\n                    )\n                })}\n            </ul>\n        </div>\n     ) : (\n         <div className=\"empty\"> Not books to read. Hello free time:)</div>\n     );\n}\n \nexport default BookList;","import React, { useContext, useState } from \"react\";\nimport { BookContext } from \"../contexts/BookContext\";\n\nconst NewBookForm = () => {\n  const { dispatch } = useContext(BookContext);\n\n  const [title, setTitle] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n\n  const handleSubmit = (e) => {\n      e.preventDefault();\n      //instead of taking specific functions, it will take a general function: dispatch, that takes the type and the payload\n\n      dispatch({type:\"ADD_BOOK\", book:{title, author}})\n      setTitle('');\n      setAuthor('');\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"book title\"\n        value={title}\n        onChange={e => setTitle(e.target.value)}\n        required\n      />\n      <input\n        type=\"text\"\n        placeholder=\"book author\"\n        value={author}\n        onChange={e => setAuthor(e.target.value)}\n        required\n      />\n      <input type=\"submit\" value=\"add book\"/>\n    </form>\n  );\n};\n\nexport default NewBookForm;\n","import React from 'react';\nimport BookContextProvider from './contexts/BookContext';\nimport NavBar from './components/NavBar.component';\nimport BookList from './components/BookList.component';\nimport NewBookForm from './components/BookForm.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <NavBar/>\n        <BookList/>\n        <NewBookForm/>\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}